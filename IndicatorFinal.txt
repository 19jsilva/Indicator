



//@version=5
indicator('Indicator Collection', 'Indicator', overlay=true, max_bars_back=501)
ChannelW = input.int(defval=1, title='Maximum Channel Width %', minval=1, maxval=8, group='Support & Resistance Settings', tooltip='Calculated using Highest/Lowest levels in 300 bars')
minstrength = input.int(defval=1, title='Minimum Strength', minval=1, group='Support & Resistance Settings', tooltip='Channel must contain at least 2 Pivot Points')
maxnumsr = input.int(defval=6, title='Maximum Number of S/R', minval=1, maxval=10, group='Support & Resistance Settings', tooltip='Maximum number of Support/Resistance Channels to Show') - 1
loopback = input.int(defval=290, title='Loopback Period', minval=100, maxval=400, group='Support & Resistance Settings', tooltip='While calculating S/R levels it checks Pivots in Loopback Period')
res_col = input.color(defval=color.new(color.red, 75), title='Resistance Color', group='Support & Resistance Colors')
sup_col = input.color(defval=color.new(color.lime, 75), title='Support Color', group='Support & Resistance Colors')
inch_col = input.color(defval=color.new(color.gray, 75), title='Color When Price in Channel', group='Support & Resistance Colors')





//Moving Average Starts here
ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :
     type == "EMA" ? ta.ema(source, length) :
     type == "SMMA (RMA)" ? ta.rma(source, length) :
     type == "WMA" ? ta.wma(source, length) :
     type == "VWMA" ? ta.vwma(source, length) :
     na



// Moving Average #1
show_ma1   = input.bool(true   , '', inline='MA #1', group='Moving Average Settings')
ma1_len = input.int(defval=20, title='MA #1', inline='MA #1', group='Moving Average Settings', minval=1)
ma1_type = input.string(defval='SMA', title='', inline='MA #1', options=['SMA', 'EMA','SMMA (RMA)', 'WMA', 'VWMA'], group='Moving Average Settings')
ma1_color  = input(#f6c309, title='', inline='MA #1', group='Moving Average Settings')
ma1_source = input(close  , ""     , inline='MA #1', group='Moving Average Settings')
ma1 = ma(ma1_source, ma1_len, ma1_type)
plot(show_ma1 ? ma1 : na, color= ma1_color, title="MA #1")

// Moving Average #2
show_ma2   = input.bool(true   , '', inline='MA #2', group='Moving Average Settings')
ma2_len = input.int(defval=50, title='MA #2', inline='MA #2', group='Moving Average Settings', minval=1)
ma2_type = input.string(defval='SMA', title='', inline='MA #2', options=['SMA', 'EMA','SMMA (RMA)', 'WMA', 'VWMA'], group='Moving Average Settings')
ma2_color  = input(#fb9800, title='', inline='MA #2', group='Moving Average Settings')
ma2_source = input(close  , ""     , inline='MA #2', group='Moving Average Settings')
ma2 = ma(ma2_source, ma2_len, ma2_type)
plot(show_ma2 ? ma2 : na, color= ma2_color, title="MA #2")

// Moving Average #3
show_ma3   = input.bool(true   , '', inline='MA #3', group='Moving Average Settings')
ma3_len = input.int(defval=100, title='MA #3', inline='MA #3', group='Moving Average Settings', minval=1)
ma3_type = input.string(defval='SMA', title='', inline='MA #3', options=['SMA', 'EMA','SMMA (RMA)', 'WMA', 'VWMA'], group='Moving Average Settings')
ma3_color  = input(#fb6500, title='', inline='MA #3', group='Moving Average Settings')
ma3_source = input(close  , ""     , inline='MA #3', group='Moving Average Settings')
ma3 = ma(ma3_source, ma3_len, ma3_type)
plot(show_ma3 ? ma3 : na, color= ma3_color, title="MA #3")

// Moving Average #4
show_ma4   = input.bool(true   , '', inline='MA #4', group='Moving Average Settings')
ma4_len = input.int(defval=200, title='MA #4', inline='MA #4', group='Moving Average Settings', minval=1)
ma4_type = input.string(defval='SMA', title='', inline='MA #4', options=['SMA', 'EMA','SMMA (RMA)', 'WMA', 'VWMA'], group='Moving Average Settings')
ma4_color  = input(#f60c0c, title='', inline='MA #4', group='Moving Average Settings')
ma4_source = input(close  , ""     , inline='MA #4', group='Moving Average Settings')
ma4 = ma(ma4_source, ma4_len, ma4_type)
plot(show_ma4 ? ma4 : na, color= ma4_color, title="MA #4")




// Input parameters for pivot points
prd = input.int(defval=10, title='Pivot Period', minval=4, maxval=30, tooltip='Used while calculating Pivot Points, checks left&right bars', group='Pivot Point Settings')
ppsrc = input.string(defval='Close/Open', title='Source', options=['High/Low', 'Close/Open'], tooltip='Source for Pivot Points', group='Pivot Point Settings')
showpp = input.bool(defval=true, title='Show Pivot Points', tooltip='Shows pivots from a support/resistance area', group='Pivot Point Settings')

// Determine the source for calculating pivot points
float src1 = ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 = ppsrc == 'High/Low' ? low : math.min(close, open)

// Calculate Pivot High and Pivot Low
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd)

// Plot Pivot points if enabled
plotshape(ph and showpp, style=shape.labeldown, color=na, textcolor=color.new(color.red, 0), location=location.abovebar, text='H', offset=-prd)
plotshape(pl and showpp, style=shape.labelup, color=na, textcolor=color.new(color.lime, 0), location=location.belowbar, text='L', offset=-prd)

// Draw Pivot points
plotshape(ph and showpp, text='H', style=shape.labeldown, color=na, textcolor=color.new(color.red, 0), location=location.abovebar, offset=-prd)
plotshape(pl and showpp, text='L', style=shape.labelup, color=na, textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-prd)

//SFP Menu Starts Here
swingHistory = input.int(10, title='Swing history:', minval=1, group='Swing Failure Pattern Settings')
plotSwings = input.bool(false, title='Plot swings', group='Swing Failure Pattern Settings')
plotFirstSFPOnly = input.bool(true, title='Plot only first SFP candle', group='Swing Failure Pattern Settings')
plotStrongerSFPs = input.int(10, title='Plot stronger SFPs:', minval=0, group='Swing Failure Pattern Settings')

// SFP Code
//Swing Lows and Swing Highs code
isSwingHigh = false
isSwingLow = false
swingHigh = high[swingHistory]
swingLow = low[swingHistory]
range_1 = swingHistory * 2

for i = 0 to range_1 by 1
    isSwingHigh := true
    if i < swingHistory
        if high[i] > swingHigh
            isSwingHigh := false
            break
    if i > swingHistory
        if high[i] >= swingHigh
            isSwingHigh := false
            break

for i = 0 to range_1 by 1
    isSwingLow := true
    if i < swingHistory
        if low[i] < swingLow
            isSwingLow := false
            break
    if i > swingHistory
        if low[i] <= swingLow
            isSwingLow := false
            break

// Swing Failure Pattern
isSwingHighFailure = false
isSwingLowFailure = false
var lastSwingHigh = float(na)
var lastSwingLow = float(na)

lastSwingHigh := isSwingHigh ? swingHigh : lastSwingHigh
lastSwingLow := isSwingLow ? swingLow : lastSwingLow

strengthOfHighSFP = 0
if lastSwingHigh < high and lastSwingHigh > close and ta.barssince(lastSwingHigh) <= swingHistory
    isSwingHighFailure := true
    if plotFirstSFPOnly
        lastSwingHigh := na
        lastSwingHigh
    else
        for i = 0 to plotStrongerSFPs by 1
            if isSwingHighFailure[i]
                strengthOfHighSFP += 1  // it will be at least 1
                strengthOfHighSFP
            else
                if high[i] > high
                    strengthOfHighSFP -= 1
                    strengthOfHighSFP

strengthOfLowSFP = 0
if lastSwingLow > low and lastSwingLow < close and ta.barssince(lastSwingLow) <= swingHistory
    isSwingLowFailure := true
    if plotFirstSFPOnly
        lastSwingLow := na
        lastSwingLow
    else
        for i = 0 to plotStrongerSFPs by 1
            if isSwingHighFailure[i]
                strengthOfLowSFP += 1  // it will be at least 1
                strengthOfLowSFP
            else
                if low[i] < low
                    strengthOfLowSFP -= 1
                    strengthOfLowSFP


// Order Blocks 



// Debugging
plotchar(isSwingHighFailure, 'Swing High Failure', '', location.top)
plotchar(isSwingLowFailure, 'Swing Low Failure', '', location.top)
plotchar(lastSwingHigh, 'Last Swing High', '', location.top)
plotchar(lastSwingLow, 'Last Swing Low', '', location.top)

// Alerting
alertcondition(condition=isSwingHighFailure, title='SFP: Swing High Failure', message='Swing High Failure')
alertcondition(condition=isSwingLowFailure, title='SFP: Swing Low Failure', message='Swing Low Failure')
alertcondition(condition=isSwingHighFailure or isSwingLowFailure, title='SFP: Any Swing Failure Pattern', message='Any Swing Failure Pattern')

// Plotting
plotshape(series=plotSwings ? isSwingHigh : na, text='SH', style=shape.labeldown, color=na, textcolor=color.new(color.red, 0), location=location.abovebar, offset=-swingHistory)
plotshape(series=plotSwings ? isSwingLow : na, text='SL', style=shape.labelup, color=na, textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-swingHistory)

plotshape(series=isSwingHighFailure and strengthOfHighSFP <= 1, text='SFP', style=shape.labeldown, color=na, textcolor=color.new(color.white, 0), location=location.abovebar)
plotshape(series=isSwingHighFailure and strengthOfHighSFP >= 3, text='SFP', style=shape.labeldown, color=na, textcolor=color.new(color.white, 0), location=location.abovebar)
plotshape(series=isSwingLowFailure and strengthOfLowSFP <= 1, text='SFP', style=shape.labelup, color=na, textcolor=color.new(color.white, 0), location=location.belowbar)
plotshape(series=isSwingLowFailure and strengthOfLowSFP >= 3, text='SFP', style=shape.labelup, color=na, textcolor=color.new(color.white, 0), location=location.belowbar)

// Calculate maximum S/R channel width
prdhighest = ta.highest(300)
prdlowest = ta.lowest(300)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

// Get/keep Pivot levels
var pivotvals = array.new_float(0)
var pivotlocs = array.new_float(0)
if ph or pl
    array.unshift(pivotvals, ph ? ph : pl)
    array.unshift(pivotlocs, bar_index)
    for x = array.size(pivotvals) - 1 to 0 by 1
        if bar_index - array.get(pivotlocs, x) > loopback  // remove old pivot points
            array.pop(pivotvals)
            array.pop(pivotlocs)
            continue
        break

// Find/create SR channel of a pivot point
get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1 by 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= hi ? hi - cpp : cpp - lo
        if wdth <= cwidth  // width of current pivot point and existing s/r
            if cpp <= hi
                lo := math.min(lo, cpp)
                lo
            else
                hi := math.max(hi, cpp)
                hi
            numpp += 20  // each pivot point added as 20
            numpp
    [hi, lo, numpp]

// Keep old SR channels and calculate/sort new channels if we meet new pivot point
var suportresistance = array.new_float(20, 0)  // min/max levels
changeit(x, y) =>
    tmp = array.get(suportresistance, y * 2)
    array.set(suportresistance, y * 2, array.get(suportresistance, x * 2))
    array.set(suportresistance, x * 2, tmp)
    tmp := array.get(suportresistance, y * 2 + 1)
    array.set(suportresistance, y * 2 + 1, array.get(suportresistance, x * 2 + 1))
    array.set(suportresistance, x * 2 + 1, tmp)

if ph or pl
    supres = array.new_float(0)  // number of pivot, strength, min/max levels
    stren = array.new_float(10, 0)
    // Get levels and strengths
    for x = 0 to array.size(pivotvals) - 1 by 1
        [hi, lo, strength] = get_sr_vals(x)
        array.push(supres, strength)
        array.push(supres, hi)
        array.push(supres, lo)

    // Add each HL to strength
    for x = 0 to array.size(pivotvals) - 1 by 1
        h = array.get(supres, x * 3 + 1)
        l = array.get(supres, x * 3 + 2)
        s = 0
        for y = 0 to loopback by 1
            if high[y] <= h and high[y] >= l or low[y] <= h and low[y] >= l
                s += 1
                s
        array.set(supres, x * 3, array.get(supres, x * 3) + s)

    // Reset SR levels
    array.fill(suportresistance, 0)
    // Get strongest SRs
    src = 0
    for x = 0 to array.size(pivotvals) - 1 by 1
        stv = -1.  // value
        stl = -1  // location
        for y = 0 to array.size(pivotvals) - 1 by 1
            if array.get(supres, y * 3) > stv and array.get(supres, y * 3) >= minstrength * 20
                stv := array.get(supres, y * 3)
                stl := y
                stl
        if stl >= 0
            // Get sr level
            hh = array.get(supres, stl * 3 + 1)
            ll = array.get(supres, stl * 3 + 2)
            array.set(suportresistance, src * 2, hh)
            array.set(suportresistance, src * 2 + 1, ll)
            array.set(stren, src, array.get(supres, stl * 3))

            // Make included pivot points' strength zero 
            for y = 0 to array.size(pivotvals) - 1 by 1
                if array.get(supres, y * 3 + 1) <= hh and array.get(supres, y * 3 + 1) >= ll or array.get(supres, y * 3 + 2) <= hh and array.get(supres, y * 3 + 2) >= ll
                    array.set(supres, y * 3, -1)

            src += 1
            if src >= 10
                break

    // Sort strengths and swap corresponding SR levels
    for x = 0 to 8 by 1
        for y = x + 1 to 9 by 1
            if array.get(stren, y) > array.get(stren, x)
                tmp = array.get(stren, y)
                array.set(stren, y, array.get(stren, x))
                changeit(x, y)

// Function to get SR level
get_level(ind) =>
    float ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind)
            ret
    ret

// Function to get SR color
get_color(ind) =>
    color ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind) > close and array.get(suportresistance, ind + 1) > close ? res_col : array.get(suportresistance, ind) < close and array.get(suportresistance, ind + 1) < close ? sup_col : inch_col
            ret
    ret

// Create and manage SR channels
var srchannels = array.new_box(10)
for x = 0 to math.min(9, maxnumsr) by 1
    box.delete(array.get(srchannels, x))
    srcol = get_color(x * 2)
    if not na(srcol)
        array.set(srchannels, x, box.new(left=bar_index, top=get_level(x * 2), right=bar_index + 1, bottom=get_level(x * 2 + 1), border_color=srcol, border_width=1, extend=extend.both, bgcolor=srcol))

// Check for broken support/resistance levels
resistancebroken = false
supportbroken = false

// Check if it's not in a channel
not_in_a_channel = true
for x = 0 to math.min(9, maxnumsr) by 1
    if close <= array.get(suportresistance, x * 2) and close >= array.get(suportresistance, x * 2 + 1)
        not_in_a_channel := false
        not_in_a_channel

// If price is not in a channel then check broken ones
if not_in_a_channel
    for x = 0 to math.min(9, maxnumsr) by 1
        if close[1] <= array.get(suportresistance, x * 2) and close > array.get(suportresistance, x * 2)
            resistancebroken := true
            resistancebroken
        if close[1] >= array.get(suportresistance, x * 2 + 1) and close < array.get(suportresistance, x * 2 + 1)
            supportbroken := true
            supportbroken

// Alert conditions for broken support/resistance
alertcondition(resistancebroken, title='Resistance Broken', message='Resistance Broken')
alertcondition(supportbroken, title='Support Broken', message='Support Broken')


//OB Menu Starts here
plotOB = input.bool(defval=true, title='Plot OB', group='Order Blocks')
obBullColor = input.color(defval=color.new(color.green, 90), title='Bullish OB Color', inline='Set Custom Color', group='Order Blocks')
obBearColor = input.color(defval=color.new(color.red, 90), title='Bearish OB Color', inline='Set Custom Color', group='Order Blocks')
obBoxBorder = input.string(defval=line.style_solid, title='OB Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Order Blocks', tooltip='To disable border, set Border Width below to 0')
obBorderTransparency = input.int(defval=80, title='OB Border Box Transparency', minval=0, maxval=100, group='Order Blocks')
obMaxBoxSet = input.int(defval=10, title='Maximum OB Box Displayed', minval=1, maxval=100, group='Order Blocks', tooltip='Minimum = 1, Maximum = 100')
filterMitOB = input.bool(defval=true, title='Custom Color Mitigated OB', group='Order Blocks')
mitOBColor = input.color(defval=color.new(color.gray, 95), title='Mitigated OB Color', group='Order Blocks', inline='Set Custom Color Mit OB', tooltip='Set Transparency to 0 to make mitigated OB disappear')


plotLabelOB = input.bool(defval=false, title='Plot OB Label', inline='OB label', group='Label Options')
obLabelColor = input.color(defval=color.gray, title='Color', inline='OB label', group='Label Options')
obLabelSize = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='OB label', group='Label Options')




//Box Types
var int _ob  = 1

//Box Labels
var string _obLabel  = "OB"
var string _plus     = "+"
var string _minus    = "-"
var string _empty    = ""

//Box Arrays
var box[] _bearBoxesOB  = array.new_box()
var box[] _bullBoxesOB  = array.new_box()

//Functions
isUp(index) =>
    close[index] > open[index]

isDown(index) =>
    close[index] < open[index]

isObUp(index) =>
    isDown(index + 1) and isUp(index) and close[index] > high[index + 1]

isObDown(index) =>
    isUp(index + 1) and isDown(index) and close[index] < low[index + 1]

//Function to Calculte Box Length
_controlBox(_boxes, _high, _low, _type) =>
    if array.size(_boxes) > 0
        for i = array.size(_boxes) - 1 to 0 by 1
            _box = array.get(_boxes, i)
            _boxLow = box.get_bottom(_box)
            _boxHigh = box.get_top(_box)
            _boxRight = box.get_right(_box)
            if (filterMitOB and _type == _ob) 
                if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
                    box.set_right(_box, bar_index + 1)
                else
                    if _type == _ob
                        box.set_bgcolor(_box, mitOBColor)
                        box.set_border_color(_box, mitOBColor)
                    
            else
                if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
                    box.set_right(_box, bar_index + 1)



//Bullish OB Box Plotting
if isObUp(1) and plotOB
    _bullboxOB = box.new(left=bar_index - 2, top=high[2], right=bar_index, bottom=math.min(low[2], low[1]), border_color=color.new(obBullColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBullColor, 
     text=plotLabelOB ? _obLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)
    if array.size(_bullBoxesOB) > obMaxBoxSet
        box.delete(array.shift(_bullBoxesOB))
    array.push(_bullBoxesOB, _bullboxOB)

//Bearish OB Box Plotting
if isObDown(1) and plotOB
    _bearboxOB = box.new(left=bar_index - 2, top=math.max(high[2], high[1]), right=bar_index, bottom=low[2], border_color=color.new(obBearColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBearColor, 
     text=plotLabelOB ? _obLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)
    if array.size(_bearBoxesOB) > obMaxBoxSet
        box.delete(array.shift(_bearBoxesOB))
    array.push(_bearBoxesOB, _bearboxOB)
    
if plotOB
    _controlBox(_bearBoxesOB, high, low, _ob)
    _controlBox(_bullBoxesOB, high, low, _ob)

