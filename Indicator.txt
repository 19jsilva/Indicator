//@version=4
study("Indicator Collection", "Indicator", overlay = true, max_bars_back = 501)
ChannelW = input(defval = 1, title = "Maximum Channel Width %", minval = 1, maxval = 8, group = "Support & Resistance Settings", tooltip="Calculated using Highest/Lowest levels in 300 bars")
minstrength = input(defval = 1, title = "Minimum Strength", minval = 1, group = "Support & Resistance Settings", tooltip = "Channel must contain at least 2 Pivot Points")
maxnumsr = input(defval = 6, title = "Maximum Number of S/R", minval = 1, maxval = 10, group = "Support & Resistance Settings", tooltip = "Maximum number of Support/Resistance Channels to Show") - 1
loopback = input(defval = 290, title = "Loopback Period", minval = 100, maxval = 400, group = "Support & Resistance Settings", tooltip="While calculating S/R levels it checks Pivots in Loopback Period")
res_col = input(defval = color.new(color.red, 75), title = "Resistance Color", group = "Support & Resistance Colors")
sup_col = input(defval = color.new(color.lime, 75), title = "Support Color", group = "Support & Resistance Colors")
inch_col = input(defval = color.new(color.gray, 75), title = "Color When Price in Channel", group = "Support & Resistance Colors")


//Moving Average Menu Starts here

// Enable/Disable Moving Average 1 & 2
showthema1en = input(defval = false, title = "MA 1", inline = "ma1", group = "Moving Average Settings")
showthema2en = input(defval = false, title = "MA 2", inline = "ma2", group = "Moving Average Settings")

// Length of Moving Average 1 & 2
showthema1len = input(defval = 50, title = "", inline = "ma1", group = "Moving Average Settings")
showthema2len = input(defval = 200, title = "", inline = "ma2", group = "Moving Average Settings")

// Type of Moving Average 1 & 2 (SMA or EMA)
showthema1type = input(defval = "SMA", title = "", options = ["SMA", "EMA"], inline = "ma1", group = "Moving Average Settings")
showthema2type = input(defval = "SMA", title = "", options = ["SMA", "EMA"], inline = "ma2", group = "Moving Average Settings")

// Calculate Moving Average 1 & 2 based on user's configuration
ma1 = showthema1en ? (showthema1type == "SMA" ? sma(close, showthema1len) : ema(close, showthema1len)) : na
ma2 = showthema2en ? (showthema2type == "SMA" ? sma(close, showthema2len) : ema(close, showthema2len)) : na

// Plot Moving Average 1 & 2 with blue color if available, else hide (na)
plot(ma1, color = not na(ma1) ? color.blue : na)
plot(ma2, color = not na(ma2) ? color.red : na)


// Input parameters for pivot points
prd = input(defval = 10, title="Pivot Period", minval = 4, maxval = 30, tooltip="Used while calculating Pivot Points, checks left&right bars")
ppsrc = input(defval = 'Close/Open', title="Source", options = ['High/Low', 'Close/Open'], tooltip="Source for Pivot Points")
showpp = input(defval = true, title = "Show Pivot Points", tooltip="Shows pivots from a support/resistance area")

// Determine the source for calculating pivot points
float src1 = ppsrc == 'High/Low' ? high : max(close, open)
float src2 = ppsrc == 'High/Low' ? low : min(close, open)

// Calculate Pivot High and Pivot Low
float ph = pivothigh(src1, prd, prd)
float pl = pivotlow(src2, prd, prd)

// Plot Pivot points if enabled
plotshape(ph and showpp, style = shape.labeldown, color = na, textcolor = color.red, location = location.abovebar, text = "H", offset = -prd)
plotshape(pl and showpp, style = shape.labelup, color = na, textcolor = color.lime, location = location.belowbar, text = "L", offset = -prd)

// Draw Pivot points
plotshape(ph and showpp, text = "H",  style = shape.labeldown, color = na, textcolor = color.red, location = location.abovebar, offset = -prd)
plotshape(pl and showpp, text = "L",  style = shape.labelup, color = na, textcolor = color.lime, location = location.belowbar, offset = -prd)

//SFP Menu Starts Here
swingHistory = input(10, title='Swing history:', type=input.integer, minval=1, group = "Swing Failure Pattern Settings")
plotSwings = input(false, title='Plot swings', group = "Swing Failure Pattern Settings")
plotFirstSFPOnly = input(true, title='Plot only first SFP candle', group = "Swing Failure Pattern Settings")
plotStrongerSFPs = input(10, title='Plot stronger SFPs:', type=input.integer, minval=0, group = "Swing Failure Pattern Settings")

// SFP Code
//Swing Lows and Swing Highs code
isSwingHigh = false, isSwingLow = false
swingHigh = high[swingHistory], swingLow = low[swingHistory]
range = swingHistory * 2
     
for i = 0 to range
    isSwingHigh := true
    if i < swingHistory 
        if high[i] > swingHigh
            isSwingHigh := false
            break
    if i > swingHistory
        if high[i] >= swingHigh
            isSwingHigh := false
            break

for i = 0 to range
    isSwingLow := true
    if i < swingHistory
        if low[i] < swingLow 
            isSwingLow := false
            break  
    if i > swingHistory
        if low[i] <= swingLow 
            isSwingLow := false
            break
              
// Swing Failure Pattern
isSwingHighFailure = false, isSwingLowFailure = false
var lastSwingHigh = float(na), var lastSwingLow = float(na)

lastSwingHigh := isSwingHigh ? swingHigh : lastSwingHigh
lastSwingLow := isSwingLow ? swingLow : lastSwingLow

strengthOfHighSFP = 0
if lastSwingHigh < high and lastSwingHigh > close and barssince(lastSwingHigh) <= swingHistory
    isSwingHighFailure := true
    if plotFirstSFPOnly
        lastSwingHigh := na
    else
        for i = 0 to plotStrongerSFPs
            if isSwingHighFailure[i]
                strengthOfHighSFP:= strengthOfHighSFP + 1 // it will be at least 1
            else
                if high[i] > high
                    strengthOfHighSFP:= strengthOfHighSFP - 1
    
strengthOfLowSFP = 0        
if lastSwingLow > low and lastSwingLow < close and barssince(lastSwingLow) <= swingHistory
    isSwingLowFailure := true
    if plotFirstSFPOnly
        lastSwingLow := na
    else
        for i = 0 to plotStrongerSFPs
            if isSwingHighFailure[i]
                strengthOfLowSFP:= strengthOfLowSFP + 1 // it will be at least 1
            else
                if low[i] < low
                    strengthOfLowSFP:= strengthOfLowSFP - 1


// Debugging
plotchar(isSwingHighFailure, "Swing High Failure", "", location.top)
plotchar(isSwingLowFailure, "Swing Low Failure", "", location.top)
plotchar(lastSwingHigh, "Last Swing High", "", location.top)
plotchar(lastSwingLow, "Last Swing Low", "", location.top)

// Alerting
alertcondition(condition=isSwingHighFailure, title="SFP: Swing High Failure", message="Swing High Failure")
alertcondition(condition=isSwingLowFailure, title="SFP: Swing Low Failure", message="Swing Low Failure")
alertcondition(condition=(isSwingHighFailure or isSwingLowFailure), title="SFP: Any Swing Failure Pattern", message="Any Swing Failure Pattern")

// Plotting
plotshape(series = plotSwings ? isSwingHigh : na, text = "SH", style = shape.labeldown, color = na, textcolor = color.red, location = location.abovebar, offset=-swingHistory)
plotshape(series = plotSwings ? isSwingLow : na, text = "SL", style = shape.labelup, color = na, textcolor = color.lime, location = location.belowbar, offset=-swingHistory)

plotshape(series = (isSwingHighFailure and strengthOfHighSFP <= 1), text = "SFP", style = shape.labeldown, color = na, textcolor = color.white, location = location.abovebar)
plotshape(series = (isSwingHighFailure and strengthOfHighSFP >= 3), text = "SFP", style = shape.labeldown, color = na, textcolor = color.white, location = location.abovebar)
plotshape(series = (isSwingLowFailure and strengthOfLowSFP <= 1), text = "SFP", style = shape.labelup, color = na, textcolor = color.white, location = location.belowbar)
plotshape(series = (isSwingLowFailure and strengthOfLowSFP >= 3), text = "SFP", style = shape.labelup, color = na, textcolor = color.white, location = location.belowbar)

// Calculate maximum S/R channel width
prdhighest = highest(300)
prdlowest = lowest(300)
cwidth = (prdhighest - prdlowest) * ChannelW / 100 

// Get/keep Pivot levels
var pivotvals = array.new_float(0)
var pivotlocs = array.new_float(0)
if ph or pl
    array.unshift(pivotvals, ph ? ph : pl)
    array.unshift(pivotlocs, bar_index)
    for x = array.size(pivotvals) - 1 to 0
        if bar_index - array.get(pivotlocs, x) > loopback // remove old pivot points
            array.pop(pivotvals)
            array.pop(pivotlocs)
            continue
        break

// Find/create SR channel of a pivot point
get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= hi ? hi - cpp : cpp - lo
        if wdth <= cwidth // width of current pivot point and existing s/r
            if cpp <= hi
                lo := min(lo, cpp)
            else
                hi := max(hi, cpp)
            numpp := numpp + 20 // each pivot point added as 20
    [hi, lo, numpp]

// Keep old SR channels and calculate/sort new channels if we meet new pivot point
var suportresistance = array.new_float(20, 0) // min/max levels
changeit(x, y) =>
    tmp = array.get(suportresistance, y * 2)
    array.set(suportresistance, y * 2, array.get(suportresistance, x * 2))
    array.set(suportresistance, x * 2, tmp)
    tmp := array.get(suportresistance, y * 2 + 1)
    array.set(suportresistance, y * 2 + 1, array.get(suportresistance, x * 2 + 1))
    array.set(suportresistance, x * 2 + 1, tmp)
    
if ph or pl
    supres = array.new_float(0)  // number of pivot, strength, min/max levels
    stren = array.new_float(10, 0)
    // Get levels and strengths
    for x = 0 to array.size(pivotvals) - 1
        [hi, lo, strength] = get_sr_vals(x)
        array.push(supres, strength)
        array.push(supres, hi)
        array.push(supres, lo)
    
    // Add each HL to strength
    for x = 0 to array.size(pivotvals) - 1
        h = array.get(supres, x * 3 + 1)
        l = array.get(supres, x * 3 + 2)
        s = 0
        for y = 0 to loopback
            if (high[y] <= h and high[y] >= l) or
               (low[y] <= h and low[y] >= l)
                s := s + 1
        array.set(supres, x * 3, array.get(supres, x * 3) + s)
    
    // Reset SR levels
    array.fill(suportresistance, 0)
    // Get strongest SRs
    src = 0
    for x = 0 to array.size(pivotvals) - 1
        stv = -1. // value
        stl = -1 // location
        for y = 0 to array.size(pivotvals) - 1
            if array.get(supres, y * 3) > stv and array.get(supres, y * 3) >= minstrength * 20
                stv := array.get(supres, y * 3)
                stl := y
        if stl >= 0
            // Get sr level
            hh = array.get(supres, stl * 3 + 1)
            ll = array.get(supres, stl * 3 + 2)
            array.set(suportresistance, src * 2, hh)
            array.set(suportresistance, src * 2 + 1, ll)
            array.set(stren, src, array.get(supres, stl * 3))
            
            // Make included pivot points' strength zero 
            for y = 0 to array.size(pivotvals) - 1
                if (array.get(supres, y * 3 + 1) <= hh and array.get(supres, y * 3 + 1) >= ll) or
                   (array.get(supres, y * 3 + 2) <= hh and array.get(supres, y * 3 + 2) >= ll)
                    array.set(supres, y * 3, -1)

            src += 1
            if src >= 10
                break

    // Sort strengths and swap corresponding SR levels
    for x = 0 to 8
        for y = x + 1 to 9
            if array.get(stren, y) > array.get(stren, x)
                tmp = array.get(stren, y) 
                array.set(stren, y, array.get(stren, x))
                changeit(x, y)

// Function to get SR level
get_level(ind) =>
    float ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind)
    ret

// Function to get SR color
get_color(ind) =>
    color ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind) > close and array.get(suportresistance, ind + 1) > close ? res_col :
                   array.get(suportresistance, ind) < close and array.get(suportresistance, ind + 1) < close ? sup_col :
                   inch_col
    ret

// Create and manage SR channels
var srchannels = array.new_box(10)
for x = 0 to min(9, maxnumsr)
    box.delete(array.get(srchannels, x))
    srcol = get_color(x * 2)
    if not na(srcol)
        array.set(srchannels, x, 
                  box.new(left = bar_index, top = get_level(x * 2), right = bar_index + 1, bottom = get_level(x * 2 + 1), 
                          border_color = srcol, 
                          border_width = 1,
                          extend = extend.both, 
                          bgcolor = srcol))

// Check for broken support/resistance levels
resistancebroken = false
supportbroken = false

// Check if it's not in a channel
not_in_a_channel = true
for x = 0 to min(9, maxnumsr)
    if close <= array.get(suportresistance, x * 2) and close >= array.get(suportresistance, x * 2 + 1) 
        not_in_a_channel := false

// If price is not in a channel then check broken ones
if not_in_a_channel
    for x = 0 to min(9, maxnumsr)
        if close[1] <= array.get(suportresistance, x * 2) and close > array.get(suportresistance, x * 2)
            resistancebroken := true
        if close[1] >= array.get(suportresistance, x * 2 + 1) and close < array.get(suportresistance, x * 2 + 1)
            supportbroken := true

// Alert conditions for broken support/resistance
alertcondition(resistancebroken, title = "Resistance Broken", message = "Resistance Broken")
alertcondition(supportbroken, title = "Support Broken", message = "Support Broken")

